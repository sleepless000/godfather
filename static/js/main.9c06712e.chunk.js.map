{"version":3,"sources":["_logo/the-godfather.svg","Employee.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Grid","styled","div","_templateObject","Image","img","_templateObject2","Info","_templateObject3","Title","_templateObject4","Bio","_templateObject5","Employee","props","path","concat","image","react_default","a","createElement","Fragment","src","name","type","min","max","defaultValue","popularity","biography","routes","data","employees","map","employee","replace","main","App_templateObject","LeftGrid","App_templateObject2","RightGrid","App_templateObject3","List","App_templateObject4","Logo","App_templateObject5","TabLink","Link","_templateObject6","App","react_router_dom","App_Grid","logo","to","route","index","react_router","key","exact","component","sidebar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k8GAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,03BCGxC,IAAMC,EAAOC,IAAOC,IAAVC,KAKJC,EAAQH,IAAOI,IAAVC,KAKLC,EAAON,IAAOC,IAAVM,KAMJC,EAAQR,IAAOC,IAAVQ,KAILC,EAAMV,IAAOF,EAAVa,KAQM,SAASC,EAASC,GAC/B,IAAMC,EAAI,oBAAAC,OAAuBF,EAAMG,OACvC,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACpB,EAAD,KACEkB,EAAAC,EAAAC,cAAChB,EAAD,CAAOkB,IAAKP,IACZG,EAAAC,EAAAC,cAACb,EAAD,KACEW,EAAAC,EAAAC,cAACX,EAAD,KAAQK,EAAMS,MACdL,EAAAC,EAAAC,cAAA,SACEI,KAAK,QACLC,IAAI,IACJC,IAAI,KACJC,aAAcb,EAAMc,aAEtBV,EAAAC,EAAAC,cAACT,EAAD,KAAMG,EAAMe,cCzCtB,IAKeC,EALAC,EAAKC,UAAUC,IAAI,SAAAC,GAAQ,MAAK,CAC7CnB,KAAM,IAAMmB,EAASX,KAAKY,QAAQ,KAAM,IACxCC,KAAM,kBAAMlB,EAAAC,EAAAC,cAACP,EAAaqB,i4BCA5B,IAAMlC,EAAOC,IAAOC,IAAVmC,KAMJC,EAAWrC,IAAOC,IAAVqC,KASRC,EAAYvC,IAAOC,IAAVuC,KACTC,EAAOzC,IAAOC,IAAVyC,KAKJC,EAAO3C,IAAOI,IAAVwC,KAKJC,EAAU7C,YAAO8C,IAAP9C,CAAH+C,KAqDEC,MA7Cf,WACE,OACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAACkB,EAAD,KACEpB,EAAAC,EAAAC,cAACwB,EAAD,CAAMtB,IAAK8B,MACXlC,EAAAC,EAAAC,cAACsB,EAAD,KACExB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC0B,EAAD,CAASO,GAAG,gBAAZ,kBAEFnC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC0B,EAAD,CAASO,GAAG,qBAAZ,sBAEFnC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC0B,EAAD,CAASO,GAAG,eAAZ,gBAEFnC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC0B,EAAD,CAASO,GAAG,gBAAZ,kBAGHvB,EAAOG,IAAI,SAACqB,EAAOC,GAAR,OACVrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CACEC,IAAKF,EACLxC,KAAMuC,EAAMvC,KACZ2C,MAAOJ,EAAMI,MACbC,UAAWL,EAAMM,aAKvB1C,EAAAC,EAAAC,cAACoB,EAAD,KACGV,EAAOG,IAAI,SAACqB,EAAOC,GAAR,OACVrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CACEC,IAAKF,EACLxC,KAAMuC,EAAMvC,KACZ2C,MAAOJ,EAAMI,MACbC,UAAWL,EAAMlB,aChEXyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9c06712e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/the-godfather.94072296.svg\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 5fr 1fr;\n`;\n\nconst Image = styled.img`\n  padding-top: 50%;\n  width: 200px;\n  margin: 1em;\n`;\nconst Info = styled.div`\n  padding-top: 20%;\n  letter-spacing: 1px;\n  color: white;\n`;\n\nconst Title = styled.div`\n  font-size: 2em;\n`;\n\nconst Bio = styled.p`\n  padding: 2em;\n  background: rgba(0, 0, 0, 0.4);\n  display: grid;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default function Employee(props) {\n  const path = `/_images/Profile/${props.image}`;\n  return (\n    <>\n      <Grid>\n        <Image src={path} />\n        <Info>\n          <Title>{props.name}</Title>\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            defaultValue={props.popularity}\n          />\n          <Bio>{props.biography}</Bio>\n        </Info>\n      </Grid>\n    </>\n  );\n}\n","import React from 'react';\nimport data from './EmployeeData.json';\nimport Employee from './Employee';\n\nconst routes = data.employees.map(employee => ({\n  path: '/' + employee.name.replace(/ /g, ''),\n  main: () => <Employee {...employee} />\n}));\n\nexport default routes;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport routes from './Router';\nimport styled from 'styled-components';\nimport logo from './_logo/the-godfather.svg';\n\nconst Grid = styled.div`\n  height: 100vh;\n  display: grid;\n  grid-template-columns: 30% 70%;\n`;\n\nconst LeftGrid = styled.div`\n  padding-top: 5em;\n  display: grid;\n  grid-template-rows: 1fr 4fr;\n  justify-content: center;\n  gap: 20px;\n  margin-bottom: 20px;\n  background: rgba(0, 0, 0, 0.4);\n`;\nconst RightGrid = styled.div``;\nconst List = styled.div`\n  padding-top: 5em;\n  list-style-type: none;\n`;\n\nconst Logo = styled.img`\n  place-self: center;\n  height: 150px;\n`;\n\nconst TabLink = styled(Link)`\n  text-decoration: none;\n  color: white;\n  text-transform: uppercase;\n  letter-spacing: 3px;\n  font-size: 1.2em;\n`;\n\nfunction App() {\n  return (\n    <Router>\n      <Grid>\n        <LeftGrid>\n          <Logo src={logo} />\n          <List>\n            <li>\n              <TabLink to=\"VitoCorleone\">Vito Corleone</TabLink>\n            </li>\n            <li>\n              <TabLink to=\"/CarmeliaCorleone\">Carmelia Corleone</TabLink>\n            </li>\n            <li>\n              <TabLink to=\"/CarloRizzi\">Carlo Rizzi</TabLink>\n            </li>\n            <li>\n              <TabLink to=\"/LuciMancini\">Luci Mancini</TabLink>\n            </li>\n          </List>\n          {routes.map((route, index) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              component={route.sidebar}\n            />\n          ))}\n        </LeftGrid>\n\n        <RightGrid>\n          {routes.map((route, index) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              component={route.main}\n            />\n          ))}\n        </RightGrid>\n      </Grid>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}